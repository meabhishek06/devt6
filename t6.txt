job("j-job1"){
        description("this job will copy the file in you os version and push image to docker hub")
        scm {
                 github('meabhishek06/devt6' , 'master')
             }
        triggers {
                scm("* * * * *")
                
        }

        steps {
        shell('''sudo cp  * /mnt
sudo scp /mnt/* root@192.168.99.106:/devt6
sudo ssh root@192.168.99.106 docker build -t aroraabhishek/devt6:latest  /devt6
sudo ssh root@192.168.99.106 docker push aroraabhishek/devt6''')
      }
}


job("j-job2"){
        description("this will create deployment for website and expose deployment")
        
        triggers {
        upstream {
    upstreamProjects("j-job1")
    threshold("Fail")
        }
        }

        steps {
        shell('''if sudo ssh root@192.168.99.106 kubectl get deployment | grep myweb
then
echo " updating"
else
sudo ssh root@192.168.99.106 kubectl create deployment myweb --image=aroraabhishek/devt6
#sudo kubectl autoscale deployment myweb --min=10 --max=15 --cpu-#percent=80
fi
if sudo ssh root@192.168.99.106 kubectl get deployment -o wide | grep latest
then 
sudo ssh root@192.168.99.106 kubectl set image deployment myweb devt6=aroraabhishek/devt6
else
sudo ssh root@192.168.99.106 kubectl set image deployment myweb devt6=aroraabhishek/devt6:latest
fi
if sudo ssh root@192.168.99.106 kubectl get service | grep myweb
then 
echo "service exist"
else
sudo ssh root@192.168.99.106 kubectl expose deployment myweb --port=80 --type=NodePort
fi ''')
      }
}


job("j-job3") {
  description ("It will test if pod is running else send a mail")
  
  triggers {
    upstream('j-job2', 'SUCCESS')
  }
  steps {
    shell('''if sudo ssh root@192.168.99.106 kubectl get deployment | grep myweb
then
echo "send to production ALL OK"
else
echo "sending back to developer Some Error is there"
sudo ssh root@192.168.99.106 python3 /devt6/mailer.py
fi''')
  }
  
buildPipelineView('j-jobs-view') {
  filterBuildQueue(true)
  filterExecutors(false)
  title('j-jobs-view')
  displayedBuilds(1)
  selectedJob('j-job1')
  alwaysAllowManualTrigger(false)
  showPipelineParameters(true)
  refreshFrequency(1)
}
}